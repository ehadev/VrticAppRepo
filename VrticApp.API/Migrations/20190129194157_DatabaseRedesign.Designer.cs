// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VrticApp.API.Contexts;

namespace VrticApp.API.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20190129194157_DatabaseRedesign")]
    partial class DatabaseRedesign
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("VrticApp.API.Models.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityTypeId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<int>("DifficultyLevelId");

                    b.Property<string>("Duration");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<int>("UserId");

                    b.HasKey("ActivityId");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("DifficultyLevelId");

                    b.HasIndex("UserId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("VrticApp.API.Models.ActivityComment", b =>
                {
                    b.Property<int>("ActivityCommentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId");

                    b.Property<string>("Content");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsNotified");

                    b.Property<int>("UserId");

                    b.HasKey("ActivityCommentId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityComments");
                });

            modelBuilder.Entity("VrticApp.API.Models.ActivityGrade", b =>
                {
                    b.Property<int>("ActivityGradeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId");

                    b.Property<int>("ChildId");

                    b.Property<string>("Description");

                    b.Property<int>("GradeId");

                    b.Property<bool>("IsActive");

                    b.HasKey("ActivityGradeId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ChildId");

                    b.HasIndex("GradeId");

                    b.ToTable("ActivityGrades");
                });

            modelBuilder.Entity("VrticApp.API.Models.ActivityType", b =>
                {
                    b.Property<int>("ActivityTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.HasKey("ActivityTypeId");

                    b.ToTable("ActivityTypes");
                });

            modelBuilder.Entity("VrticApp.API.Models.Child", b =>
                {
                    b.Property<int>("ChildId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChildPhotoId");

                    b.Property<int>("DepartmentId");

                    b.Property<string>("EyeColor");

                    b.Property<string>("FavoriteColor");

                    b.Property<string>("FavoriteFood");

                    b.Property<string>("FavoritePictureBook");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<string>("HairColor");

                    b.Property<decimal>("Height");

                    b.Property<bool>("IsActive");

                    b.Property<string>("JMBG");

                    b.Property<string>("LastName");

                    b.Property<decimal>("Weight");

                    b.HasKey("ChildId");

                    b.HasIndex("ChildPhotoId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Children");
                });

            modelBuilder.Entity("VrticApp.API.Models.ChildAbsence", b =>
                {
                    b.Property<int>("ChildAbsenceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChildId");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("DateFrom");

                    b.Property<DateTime>("DateTo");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsNotified");

                    b.Property<string>("Reason");

                    b.Property<int>("UserId");

                    b.HasKey("ChildAbsenceId");

                    b.HasIndex("ChildId");

                    b.HasIndex("UserId");

                    b.ToTable("ChildAbsences");
                });

            modelBuilder.Entity("VrticApp.API.Models.ChildActivity", b =>
                {
                    b.Property<int>("ChildActivityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId");

                    b.Property<int>("ChildId");

                    b.HasKey("ChildActivityId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ChildId");

                    b.ToTable("ChildActivities");
                });

            modelBuilder.Entity("VrticApp.API.Models.ChildMembership", b =>
                {
                    b.Property<int>("ChildMembershipId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<int>("ChildId");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsPaid");

                    b.Property<int>("MembershipTypeId");

                    b.Property<string>("Name");

                    b.Property<DateTime>("PaymentDate");

                    b.Property<DateTime>("PaymentDeadline");

                    b.HasKey("ChildMembershipId");

                    b.HasIndex("ChildId");

                    b.HasIndex("MembershipTypeId");

                    b.ToTable("ChildMemberships");
                });

            modelBuilder.Entity("VrticApp.API.Models.ChildPhoto", b =>
                {
                    b.Property<int>("ChildPhotoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<string>("PhotoURL");

                    b.HasKey("ChildPhotoId");

                    b.ToTable("ChildPhotos");
                });

            modelBuilder.Entity("VrticApp.API.Models.Cost", b =>
                {
                    b.Property<int>("CostId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<int>("CostTypeId");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("DateOfPayment");

                    b.Property<string>("Description");

                    b.Property<bool>("IsPaid");

                    b.Property<string>("Name");

                    b.Property<int>("UserId");

                    b.Property<int>("UserPaid");

                    b.HasKey("CostId");

                    b.HasIndex("CostTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Costs");
                });

            modelBuilder.Entity("VrticApp.API.Models.CostType", b =>
                {
                    b.Property<int>("CostTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.HasKey("CostTypeId");

                    b.ToTable("CostTypes");
                });

            modelBuilder.Entity("VrticApp.API.Models.DeletedMessage", b =>
                {
                    b.Property<int>("DeletedMessageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<int>("MessageId");

                    b.Property<int>("UserId");

                    b.HasKey("DeletedMessageId");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("DeletedMessages");
                });

            modelBuilder.Entity("VrticApp.API.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("VrticApp.API.Models.DepartmentUser", b =>
                {
                    b.Property<int>("DepartmentUserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId");

                    b.Property<int>("UserId");

                    b.HasKey("DepartmentUserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("DepartmentUsers");
                });

            modelBuilder.Entity("VrticApp.API.Models.DifficultyLevel", b =>
                {
                    b.Property<int>("DifficultyLevelId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.HasKey("DifficultyLevelId");

                    b.ToTable("DifficultyLevels");
                });

            modelBuilder.Entity("VrticApp.API.Models.Grade", b =>
                {
                    b.Property<int>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<decimal>("Value");

                    b.HasKey("GradeId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("VrticApp.API.Models.Kindergarten", b =>
                {
                    b.Property<int>("KindergartenId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Email");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LogoURL");

                    b.Property<string>("Name");

                    b.Property<string>("Owner");

                    b.Property<string>("Phone");

                    b.Property<string>("Web");

                    b.HasKey("KindergartenId");

                    b.ToTable("Kindergartens");
                });

            modelBuilder.Entity("VrticApp.API.Models.KindergartenOffice", b =>
                {
                    b.Property<int>("KindergartenOfficeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KindergartenId");

                    b.Property<int>("OfficeId");

                    b.HasKey("KindergartenOfficeId");

                    b.HasIndex("KindergartenId");

                    b.HasIndex("OfficeId");

                    b.ToTable("KindergartenOffices");
                });

            modelBuilder.Entity("VrticApp.API.Models.MembershipType", b =>
                {
                    b.Property<int>("MembershipTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.HasKey("MembershipTypeId");

                    b.ToTable("MembershipTypes");
                });

            modelBuilder.Entity("VrticApp.API.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsNotified");

                    b.Property<int>("ReceiverId");

                    b.Property<string>("Title");

                    b.Property<int>("UserId");

                    b.HasKey("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("VrticApp.API.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsNotified");

                    b.Property<string>("Title");

                    b.Property<int>("UserId");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("VrticApp.API.Models.Office", b =>
                {
                    b.Property<int>("OfficeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<string>("PostalCode");

                    b.HasKey("OfficeId");

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("VrticApp.API.Models.OfficeCost", b =>
                {
                    b.Property<int>("OfficeCostId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CostId");

                    b.Property<int>("OfficeId");

                    b.HasKey("OfficeCostId");

                    b.HasIndex("CostId");

                    b.HasIndex("OfficeId");

                    b.ToTable("OfficeCosts");
                });

            modelBuilder.Entity("VrticApp.API.Models.OfficeDepartment", b =>
                {
                    b.Property<int>("OfficeDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId");

                    b.Property<int>("OfficeId");

                    b.HasKey("OfficeDepartmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("OfficeId");

                    b.ToTable("OfficeDepartments");
                });

            modelBuilder.Entity("VrticApp.API.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("VrticApp.API.Models.Settings", b =>
                {
                    b.Property<int>("SettingsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Value");

                    b.HasKey("SettingsId");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("VrticApp.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("City");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PhotoURL");

                    b.Property<string>("PostalCode");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("VrticApp.API.Models.UserActivity", b =>
                {
                    b.Property<int>("UserActivityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId");

                    b.Property<int>("UserId");

                    b.HasKey("UserActivityId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("UserActivities");
                });

            modelBuilder.Entity("VrticApp.API.Models.UserChild", b =>
                {
                    b.Property<int>("UserChildId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChildId");

                    b.Property<int>("UserId");

                    b.HasKey("UserChildId");

                    b.HasIndex("ChildId");

                    b.HasIndex("UserId");

                    b.ToTable("UserChildren");
                });

            modelBuilder.Entity("VrticApp.API.Models.UserLog", b =>
                {
                    b.Property<int>("UserLogId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Activity");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Form");

                    b.Property<int>("UserId");

                    b.HasKey("UserLogId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogs");
                });

            modelBuilder.Entity("VrticApp.API.Models.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("VrticApp.API.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("VrticApp.API.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("VrticApp.API.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("VrticApp.API.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("VrticApp.API.Models.Activity", b =>
                {
                    b.HasOne("VrticApp.API.Models.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("VrticApp.API.Models.DifficultyLevel", "DifficultyLevel")
                        .WithMany()
                        .HasForeignKey("DifficultyLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("VrticApp.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("VrticApp.API.Models.ActivityComment", b =>
                {
                    b.HasOne("VrticApp.API.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("VrticApp.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("VrticApp.API.Models.ActivityGrade", b =>
                {
                    b.HasOne("VrticApp.API.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("VrticApp.API.Models.Child", "Child")
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("VrticApp.API.Models.Grade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("VrticApp.API.Models.Child", b =>
                {
                    b.HasOne("VrticApp.API.Models.ChildPhoto", "ChildPhoto")
                        .WithMany()
                        .HasForeignKey("ChildPhotoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("VrticApp.API.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("VrticApp.API.Models.ChildAbsence", b =>
                {
                    b.HasOne("VrticApp.API.Models.Child", "Child")
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("VrticApp.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("VrticApp.API.Models.ChildActivity", b =>
                {
                    b.HasOne("VrticApp.API.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("VrticApp.API.Models.Child", "Child")
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("VrticApp.API.Models.ChildMembership", b =>
                {
                    b.HasOne("VrticApp.API.Models.Child", "Child")
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("VrticApp.API.Models.MembershipType", "MembershipType")
                        .WithMany()
                        .HasForeignKey("MembershipTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("VrticApp.API.Models.Cost", b =>
                {
                    b.HasOne("VrticApp.API.Models.CostType", "CostType")
                        .WithMany()
                        .HasForeignKey("CostTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("VrticApp.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("VrticApp.API.Models.DeletedMessage", b =>
                {
                    b.HasOne("VrticApp.API.Models.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("VrticApp.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("VrticApp.API.Models.DepartmentUser", b =>
                {
                    b.HasOne("VrticApp.API.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("VrticApp.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("VrticApp.API.Models.KindergartenOffice", b =>
                {
                    b.HasOne("VrticApp.API.Models.Kindergarten", "Kindergarten")
                        .WithMany()
                        .HasForeignKey("KindergartenId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("VrticApp.API.Models.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("VrticApp.API.Models.Message", b =>
                {
                    b.HasOne("VrticApp.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("VrticApp.API.Models.Notification", b =>
                {
                    b.HasOne("VrticApp.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("VrticApp.API.Models.OfficeCost", b =>
                {
                    b.HasOne("VrticApp.API.Models.Cost", "Cost")
                        .WithMany()
                        .HasForeignKey("CostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("VrticApp.API.Models.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("VrticApp.API.Models.OfficeDepartment", b =>
                {
                    b.HasOne("VrticApp.API.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("VrticApp.API.Models.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("VrticApp.API.Models.UserActivity", b =>
                {
                    b.HasOne("VrticApp.API.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("VrticApp.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("VrticApp.API.Models.UserChild", b =>
                {
                    b.HasOne("VrticApp.API.Models.Child", "Child")
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("VrticApp.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("VrticApp.API.Models.UserLog", b =>
                {
                    b.HasOne("VrticApp.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("VrticApp.API.Models.UserRole", b =>
                {
                    b.HasOne("VrticApp.API.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("VrticApp.API.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
